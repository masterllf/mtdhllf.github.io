<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mtdhllf.github.io/</id>
    <title>Gopher&apos;s Blog</title>
    <updated>2020-04-26T14:58:16.231Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mtdhllf.github.io/"/>
    <link rel="self" href="https://mtdhllf.github.io/atom.xml"/>
    <subtitle>峰子的博客</subtitle>
    <logo>https://mtdhllf.github.io/images/avatar.png</logo>
    <icon>https://mtdhllf.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gopher&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Android/JAVA 图像分析-主要颜色]]></title>
        <id>https://mtdhllf.github.io/androidjava-tu-xiang-fen-xi-zhu-yao-yan-se/</id>
        <link href="https://mtdhllf.github.io/androidjava-tu-xiang-fen-xi-zhu-yao-yan-se/">
        </link>
        <updated>2020-04-26T14:56:46.000Z</updated>
        <content type="html"><![CDATA[<p>有些项目可能会遇到这类需求，识别一套服装或者其他物体的颜色信息，以此来判定他的颜色风格。如果业务交由于后端的话压力可能会比较大，其实前端自行处理一下就好了，逻辑也不复杂。</p>
<p>彩色图像的颜色模型有很多种形式，<a href="https://baike.baidu.com/item/RGB">RGB</a>、YUV、<a href="https://baike.baidu.com/item/HSV/547122">HSV</a>、CMYK，其中在图像处理以<a href="https://baike.baidu.com/item/RGB">RGB</a>最为直观理解且显示器系统采用就是此类模型，而<a href="https://baike.baidu.com/item/HSV/547122">HSV</a>更符合人眼的颜色分辨，通常在<a href="https://baike.baidu.com/item/HSV/547122">HSV</a>颜色空间下进行颜色识别。</p>
<h2 id="rgb的局限性">RGB的局限性</h2>
<p><a href="https://baike.baidu.com/item/RGB">RGB</a> 是我们接触最多的颜色空间，由三个通道表示一幅图像，分别为红色(R)，绿色(G)和蓝色(B)。这三种颜色的不同组合可以形成几乎所有的其他颜色。</p>
<p><a href="https://baike.baidu.com/item/RGB">RGB</a> 颜色空间是图像处理中最基本、最常用、面向硬件的颜色空间，比较容易理解。</p>
<p><a href="https://baike.baidu.com/item/RGB">RGB</a> 色空间利用三个颜色分量的线性组合来表示颜色，任何颜色都与这三个分量有关，而且这三个分量是高度相关的，所以连续变换颜色时并不直观，想对图像的颜色进行调整需要更改这三个分量才行。</p>
<p>自然环境下获取的图像容易受自然光照、遮挡和阴影等情况的影响，即对亮度比较敏感。而 <a href="https://baike.baidu.com/item/RGB">RGB</a> 颜色空间的三个分量都与亮度密切相关，即只要亮度改变，三个分量都会随之相应地改变，而没有一种更直观的方式来表达。</p>
<p>但是人眼对于这三种颜色分量的敏感程度是不一样的，在单色中，人眼对红色最不敏感，蓝色最敏感，所以 <a href="https://baike.baidu.com/item/RGB">RGB</a> 颜色空间是一种均匀性较差的颜色空间。如果颜色的相似性直接用欧氏距离来度量，其结果与人眼视觉会有较大的偏差。对于某一种颜色，我们很难推测出较为精确的三个分量数值来表示。</p>
<p>所以，<a href="https://baike.baidu.com/item/RGB">RGB</a> 颜色空间适合于显示系统，却并不适合于图像处理。</p>
<h2 id="hsv颜色空间">HSV颜色空间</h2>
<p>基于上述理由，在图像处理中使用较多的是 <a href="https://baike.baidu.com/item/HSV/547122">HSV</a>颜色空间，它比 <a href="https://baike.baidu.com/item/RGB">RGB</a> 更接近人们对彩色的感知经验。非常直观地表达颜色的色调、鲜艳程度和明暗程度，方便进行颜色的对比。</p>
<p>在 <a href="https://baike.baidu.com/item/HSV/547122">HSV</a> 颜色空间下，比<a href="https://baike.baidu.com/item/RGB">RGB</a>更容易跟踪某种颜色的物体，常用于分割指定颜色的物体。</p>
<p><a href="https://baike.baidu.com/item/HSV/547122">HSV</a> 表达彩色图像的方式由三个部分组成：</p>
<ul>
<li>Hue（色调、色相）</li>
<li>Saturation（饱和度、色彩纯净度）</li>
<li>Value（明度）</li>
</ul>
<p>用下面这个圆柱体来表示 <a href="https://baike.baidu.com/item/HSV/547122">HSV</a> 颜色空间，圆柱体的横截面可以看做是一个极坐标系 ，H 用极坐标的极角表示，S 用极坐标的极轴长度表示，V 用圆柱中轴的高度表示。</p>
<h2 id="颜色识别的思路">颜色识别的思路</h2>
<ol>
<li>统计图像中的颜色比重情况</li>
<li>合并相近的颜色输</li>
<li>得到新的结果</li>
</ol>
<h2 id="代码实现">代码实现</h2>
<ul>
<li>
<h4 id="颜色识别">颜色识别</h4>
<pre><code class="language-kotlin">/**
     * 颜色分析
     * @param bitmap 位图(建议分辨率先压缩到256基准,当quality为10耗时大概[100-200]ms)
     * @param quality 质量(颜色合并遍历次数)
     * @param take 取前几个结果
     */
    fun analyzeImageColor(bitmap: Bitmap, quality: Int = 10, take: Int) {

        /**&lt;颜色,计数&gt;*/
        val allColor = ConcurrentHashMap&lt;Int, Int&gt;()
        //统计所有颜色,相同颜色计数累加
        for (y in 0 until bitmap.height) {
            for (x in 0 until bitmap.width) {
                bitmap.getPixel(x, y).let {
                    if (allColor.containsKey(it)) allColor[it]!! + 1 else 1
                }
            }
        }
        //倒序排序
        val sortColor = allColor.toList().sortedByDescending { it.second }
            .toMap().toMutableMap()

        val hsv1 = FloatArray(3)
        val hsv2 = FloatArray(3)
        Log.i(&quot;合并前&quot;, &quot;${sortColor.size}&quot;)
        for (i in 0 until min(quality, sortColor.size)) {
            if (sortColor.size &gt; i) {
                val iterator = sortColor.iterator()
                var first = iterator.next()
                //move head
                for (j in (0 until i)) {
                    first = iterator.next()
                }
                while (iterator.hasNext()) {
                    val second = iterator.next()
                    Color.colorToHSV(first.key, hsv1)
                    Color.colorToHSV(second.key, hsv2)
                    //颜色相似判断及合并
                    if (checkColorSimilar(hsv1, hsv2)) {
                        first.setValue(first.value + second.value)
                        iterator.next()
                    }
                }

            }
        }
        Log.i(&quot;合并后&quot;, &quot;${sortColor.size}&quot;)

        //结果取数量最多的前[take]个数据,
        //List&lt;颜色,数量&gt;,结合实际需求自行封装成想要的数据
        val result = sortColor.toList().sortedByDescending { it.second }.take(take)
    }

    /**
     * 颜色相似判定
     */
    fun checkColorSimilar(hsv1: FloatArray, hsv2: FloatArray): Boolean {
        val similarH = 10f
        val similarS = 0.05
        val similarV = 0.05
        return when {
            abs(hsv1[0] - hsv2[0]) &lt; similarH -&gt; true

            abs(hsv1[0] - hsv2[0]) &lt; similarH * 2
            &amp;&amp; abs(hsv1[1] - hsv2[1]) &lt; similarS -&gt; true

            abs(hsv1[0] - hsv2[0]) &lt; similarH * 2
            &amp;&amp; abs(hsv1[2] - hsv2[2]) &lt; similarV -&gt; true

            else-&gt;false
        }
    }
</code></pre>
</li>
<li>
<p>RGB转HSV</p>
<pre><code class="language-java">public static HSV RGB2HSV(RGB rgb) {
    float r =(float) rgb . getR () / 255;
    float g =(float) rgb . getG () / 255;
    float b =(float) rgb . getB () / 255;
    float max = max (r, g, b);
    float min = min (r, g, b);
    float h = 0;
    if (r == max)
        h = (g - b) / (max - min);
    if (g == max)
        h = 2 + (b - r) / (max - min);
    if (b == max)
        h = 4 + (r - g) / (max - min);
    h *= 60;
    if (h &lt; 0) h += 360;
    HSV hsv = new HSV(h, (max - min) / max, max);
    return hsv;
}
</code></pre>
</li>
</ul>
<h2 id="参考">参考</h2>
<h3 id="rgb-hsv和hsl颜色空间"><a href="https://zhuanlan.zhihu.com/p/67930839">RGB、HSV和HSL颜色空间</a></h3>
<h3 id="rgb转-hsv"><a href="http://www.360doc.com/content/17/0726/16/45531310_674302066.shtml">RGB转 HSV</a></h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown学习笔记]]></title>
        <id>https://mtdhllf.github.io/markdown-study-notes/</id>
        <link href="https://mtdhllf.github.io/markdown-study-notes/">
        </link>
        <updated>2020-04-25T16:06:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="markdown-标题">Markdown 标题</h2>
<ul>
<li>
<p>使用 = 和 - 标记一级和二级标题</p>
<pre><code>我展示的是一级标题(下面=要两个以上)
=================

我展示的是二级标题(下行-要两个以上)
-----------------
</code></pre>
<h2 id="显示效果如下">显示效果如下：</h2>
<h1 id="我展示的是一级标题">我展示的是一级标题</h1>
<h2 id="我展示的是二级标题">我展示的是二级标题</h2>
<hr>
</li>
<li>
<p>使用 # 号标记</p>
<p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre>
<p>显示效果如下：</p>
<hr>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<hr>
</li>
</ul>
<h2 id="markdown段落样式">Markdown段落样式</h2>
<ul>
<li>
<h3 id="markdown段落">Markdown段落</h3>
<ol>
<li>
<p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p>
<pre><code>text1  (text1后面有两个空格)  
text2
</code></pre>
</li>
<li>
<p>也可以在段落后面使用一个空行来表示重新开始一个段落。</p>
<pre><code>text1

text2
</code></pre>
</li>
</ol>
</li>
<li>
<h3 id="字体">字体</h3>
<p>Markdown 可以使用以下几种字体：</p>
<pre><code>*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___
</code></pre>
<p>显示效果如下所示：</p>
<hr>
<p><em>斜体文本</em><br>
<em>斜体文本</em><br>
<strong>粗体文本</strong><br>
<strong>粗体文本</strong><br>
<em><strong>粗斜体文本</strong></em><br>
<em><strong>粗斜体文本</strong></em></p>
<hr>
</li>
</ul>
<h2 id="markdown-列表">Markdown 列表</h2>
<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号(<em><strong><strong>)、加号(</strong>+</strong>)或是减号(</em><em>-</em>*)作为列表标记：</p>
<pre><code>* 第一项
* 第二项
* 第三项

+ 第一项
+ 第二项
+ 第三项


- 第一项
- 第二项
- 第三项
</code></pre>
<p>显示结果如下：</p>
<hr>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h2 id="markdown-区块">Markdown 区块</h2>
<ul>
<li>
<p><strong>单层区块</strong></p>
<p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>
<pre><code>&gt; 白日依山尽，
&gt; 黄河入海流。
&gt; 欲穷千里目，
&gt; 更上一层楼。
</code></pre>
<p>显示结果如下：</p>
<blockquote>
<p>白日依山尽，<br>
黄河入海流。<br>
欲穷千里目，<br>
更上一层楼。</p>
</blockquote>
</li>
<li>
<p><strong>嵌套区块</strong></p>
<p>区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p>
<pre><code>&gt; 最外层
&gt; &gt; 第一层嵌套
&gt; &gt; &gt; 第二层嵌套
</code></pre>
<p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>
<p><strong>区块中使用列表</strong></p>
</li>
</ul>
<h2 id="markdown-代码">Markdown 代码</h2>
<p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：</p>
<pre><code>`printf()` 函数
</code></pre>
<p>显示结果如下：</p>
<p><code>printf()</code> 函数</p>
<ul>
<li>
<h3 id="代码区块">代码区块</h3>
<p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p>
<p>实例如下：</p>
<pre><code class="language-php">&lt;?php
echo 'beast php';
function test(){
    echo 'test';
}
</code></pre>
<p>你也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<pre><code>```javascript
$(document).ready(function () {
    alert('javascript');
});
</code></pre>
<pre><code>
显示结果如下：

```javascript
$(document).ready(function () {
    alert('javascript');
});
</code></pre>
<h2 id="markdown-链接">Markdown 链接</h2>
<ul>
<li>
<p>常用链接使用方法：</p>
<pre><code>[链接名称](链接地址)

或者

&lt;链接地址&gt;
</code></pre>
<p>例如：</p>
<pre><code>这是一个链接 [百度一下](https://www.baidu.com)
</code></pre>
<p>显示结果如下：</p>
<p>这是一个链接 <a href="https://www.baidu.com">百度一下</a></p>
</li>
<li>
<p>直接使用链接地址：</p>
<pre><code>&lt;https://www.baidu.com&gt;
</code></pre>
<p>显示结果如下：</p>
<p><a href="https://www.baidu.com">https://www.baidu.com</a></p>
</li>
</ul>
<h2 id="markdown-图片">Markdown 图片</h2>
<p>Markdown 图片语法格式如下：</p>
<pre><code>![alt 属性文本](图片地址)

![alt 属性文本](图片地址 &quot;可选标题&quot;)
</code></pre>
<ul>
<li>开头一个感叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。</li>
</ul>
<p>使用实例：</p>
<pre><code>![RUNOOB 图标](https://www.baidu.com/img/bd_logo1.png)

![RUNOOB 图标](https://www.baidu.com/img/bd_logo1.png &quot;百度&quot;)
</code></pre>
<p>显示结果如下：</p>
<figure data-type="image" tabindex="1"><img src="https://www.baidu.com/img/baidu_jgylogo3.gif" alt="RUNOOB 图标" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://www.baidu.com/img/baidu_jgylogo3.gif" alt="RUNOOB 图标" title="百度" loading="lazy"></figure>
<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>
<pre><code>&lt;img src=&quot;https://www.baidu.com/img/baidu_jgylogo3.gif&quot; width=&quot;20%&quot;&gt;
</code></pre>
<p>显示结果如下：</p>
<img src="https://www.baidu.com/img/baidu_jgylogo3.gif" width="20%">
</li>
</ul>
<h2 id="markdown-表格">Markdown 表格</h2>
<p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p>
<p>语法格式如下：</p>
<pre><code>|  表头   | 表头  |
|  ----  | ----  |
| 单元格  | 单元格 |
| 单元格  | 单元格 |
</code></pre>
<p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody>
</table>
<p>对齐方式</p>
<p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>
<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>
<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<pre><code>| 左对齐 | 右对齐 | 居中对齐 |
| :-----| ----: | :----: |
| 单元格 | 单元格 | 单元格 |
| 单元格 | 单元格 | 单元格 |
</code></pre>
<p>以上代码显示结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<h2 id="markdown-高级技巧">Markdown 高级技巧</h2>
<ul>
<li>
<h3 id="支持的-html-元素">支持的 HTML 元素</h3>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>
<p>目前支持的 HTML 元素有：等 ，如：</p>
<pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑
</code></pre>
<p>输出结果为：</p>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
</li>
<li>
<h3 id="转义">转义</h3>
<p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<pre><code>**文本加粗** 
\*\* 正常显示星号 \*\*
</code></pre>
<p>输出结果为：</p>
<p><strong>文本加粗</strong><br>
** 正常显示星号 **</p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   下划线
{}  花括号
[]  方括号
()  小括号
#   井字号
+   加号
-   减号
.   英文句点
!   感叹号
</code></pre>
</li>
<li>
<h3 id="公式">公式</h3>
<p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>
<pre><code>$$
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} 
\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\
\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\
\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\
\end{vmatrix}
${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}
$$
</code></pre>
<p>输出结果为：</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 248: …
\end{vmatrix}
$̲{$tep1}{\style{…'>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} 
\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\
\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\
\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\
\end{vmatrix}
${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}
</p>
</li>
</ul>
]]></content>
    </entry>
</feed>